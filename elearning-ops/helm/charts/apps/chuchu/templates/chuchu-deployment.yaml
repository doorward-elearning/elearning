apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chuchu.fullname" . }}
  namespace: {{ required "A valid foo is required!" .Values.customer -}}-doorward
  labels:
    {{- include "chuchu.labels" . | nindent 4 }}
    customer: {{ .Values.customer }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "chuchu.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "chuchu.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "chuchu.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.chuchu.repository }}:{{ .Values.image.chuchu.version }}"
          imagePullPolicy: {{ .Values.image.chuchu.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetport }}
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 100
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: {{ .Values.service.targetport }}
          readinessProbe:
            failureThreshold: 3
            periodSeconds: {{ .Values.container.startupseconds }}
            successThreshold: 1
            timeoutSeconds: 2
            tcpSocket:
              port: {{ .Values.service.targetport }}
          env:
            - name: OPENVIDU_API_PORT
              valueFrom:
                configMapKeyRef:
                  key: OPENVIDU_API_PORT
                  name: {{ .Values.customer -}}-config
            - name: OPENVIDU_API_URL
              valueFrom:
                configMapKeyRef:
                  key: OPENVIDU_API_URL
                  name: {{ .Values.customer -}}-config
            - name: REACT_APP_BASE_URL
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_BASE_URL
                  name: {{ .Values.customer -}}-config
            - name: REACT_APP_CHAT_API_URL
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_CHAT_API_URL
                  name: {{ .Values.customer -}}-config
            - name: REACT_APP_CHAT_WEBSOCKET_URL
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_CHAT_WEBSOCKET_URL
                  name: {{ .Values.customer -}}-config
            - name: REACT_APP_OPENVIDU_URL
              valueFrom:
                configMapKeyRef:
                  key: REACT_APP_OPENVIDU_URL
                  name: {{ .Values.customer -}}-config
            - name: JITSI_MEET_DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: JITSI_MEET_DOMAIN
                  name: {{ .Values.customer -}}-config
            - name: TINY_MCE_API_KEY
              valueFrom:
                configMapKeyRef:
                  key: TINY_MCE_API_KEY
                  name: {{ .Values.customer -}}-config
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: tz-config
            mountPath: /etc/localtime
      volumes:
      - name: tz-config
        hostPath:
          path: /usr/share/zoneinfo/{{- .Values.timezone}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
